Median <- exp(m)  # median is same for both plots
Mean <- c(exp(m+(s[1]^2)/2),exp(m+(s[2]^2)/2))
Mode <- c(exp(m-s[1]^2),exp(m-(s[2]^2)))
# create figures for file
filename <- 'Figure 03-09'
pdf(paste(fileplace,filename,'.pdf'))
# plot the log-normal curve with standard deviation = 0.25; add title and axes lables
plot.new()
plot(x, dlnorm(x, m, s[1]), col = 'black', type='l', xlab='x',
lwd = 1, ylim = c(0,2), xlim= c(0,2), lty = 1,
ylab='f(x)', main='Log-Normal Distribution \n Solid: sd = 0.25, Dashed: sd = 1',
cex.main = sm, cex.lab = sl, cex.axis = sa)
# add log-normal curve with a standard deviation = 1
lines(x, dlnorm(x, m, s[2]), col = 'black', lty = 3, lwd = 3)
# add vertical lines for the two means of the log-normal curves
lines(c(Mean[1], Mean[1]), c(-0.5,1.53), lty = 1, col='red', lwd=1)
lines(c(Mean[2], Mean[2]), c(-0.5,0.25), lty = 3, col='red', lwd=3)
# add vertical lines for the two modes of the log-normal curves
lines(c(Mode[1], Mode[1]), c(-0.5,1.65), lty = 1, col='blue', lwd=1)
lines(c(Mode[2], Mode[2]), c(-0.5,0.7), lty = 3, col='blue', lwd=3)
# add vertical lines for the two medians of the log-normal curves
lines(c(Median, Median), c(-0.5,1.6), lty = 1, col='green', lwd=1)
lines(c(Median, Median), c(0,0.4), lty = 3, lwd = 3, col = 'green')
# add a legend
legend('topright', lwd = c(1,1,1,1), bty = 'n', lty = 1,
c('Mean','Median','Mode'),
col = c, cex = sl)
# write figures
dev.off()
####################################################################################
# Figure 03-10
# Skewness of a distribution will shift the mean and mode away from the median.
# generate sequence of x values
x <- seq(-4,4,length=10000)
# define histogram shape parameters
a <- 4
b <- 2
# create figures for file
filename <- 'Figure 03-10'
pdf(paste(fileplace,filename,'.pdf'))
# allow for stacking of figures 1 row and 2 columns in size
par(mfrow=c(1,3))
par(cex.main = sm, cex.lab = sl, cex.axis = sa)
# plot negative skew curve
plot(x,dbeta(x,a,b),xlim=c(0,1), ylim=c(0,2.7), type='l', lty=1, xlab='', ylab='', lwd = 1, yaxt='n',
main='Left (negative) skew', bty='n', col='red', col.main = 'red', xaxt='n',
cex.main = sm, cex.lab = sl, cex.axis = sa)
mean <- a/(a+b)
median <- (a-(1/3))/(a+b-(2/3))
mode <- (a-1)/(a+b-2)
# plot mean for negative skew and label accordingly
lines( c(mean,mean), c(-0.05, 2.3), col = 'black', lty=3, lwd = 3)
# plot median for negative skew and label accordingly
lines( c(median,median), c(-0.05, 2.3), col = 'green', lty=3, lwd = 2)
# plot mode for negative skew and label accordingly
lines( c(mode,mode), c(-0.05, 2.3), col = 'orange', lty=2, lwd = 2)
# plot arrow indicating negative skew
arrows(1,2.6,x1=0,length = 0.25, angle = 30,
code = 2, col = 'red', lty = par('lty'))
# plot normal curve
plot(x,dbeta(x,a,a),xlim=c(0,1), ylim=c(0,2.7), type='l', lty=1, xlab='SKEW', ylab='', lwd = 1, yaxt='n',
main='Normal', bty='n', xaxt='n', cex.axis = 2, cex.main = sm, cex.lab = sl, cex.axis = sa)
mean <- a/(a+a)
median <- (a-(1/3))/(a+a-(2/3))
mode <- (a-1)/(a+a-2)
# plot mean for negative skew and label accordingly
lines( c(mean,mean), c(-0.05, 2.3), col = 'black', lty=3, lwd = 3)
# plot mode for negative skew and label accordingly
lines( c(mode,mode), c(-0.05, 2.3), col = 'orange', lty=2, lwd = 2)
# plot median for negative skew and label accordingly
lines( c(median,median), c(-0.05, 2.3), col = 'green', lty=3, lwd = 2)
# add a legend
legend('top', lwd = c(3,2,2), bty = 'n', lty = c(3,3,2),
c('Mean','Median','Mode'),
col = c('black', 'green', 'orange'))
# plot positive skew curve
plot(x,dbeta(x,b,a),xlim=c(0,1), ylim=c(0,2.7), type='l', lty=1, xlab='', ylab='', lwd = 1, yaxt='n',
main='Right (positive) skew', bty='n', col='blue', col.main = 'blue', xaxt='n',
cex.main = sm, cex.lab = sl, cex.axis = sa)
mean <- b/(b+a)
median <- (b-(1/3))/(b+a-(2/3))
mode <- (b-1)/(b+a-2)
# plot mean for negative skew and label accordingly
lines( c(mean,mean), c(-0.05, 2.3), col = 'black', lty=3, lwd = 3)
# plot mode for negative skew and label accordingly
lines( c(mode,mode), c(-0.05, 2.3), col = 'orange', lty=2, lwd = 2)
# plot median for negative skew and label accordingly
lines( c(median,median), c(-0.05, 2.3), col = 'green', lty=3, lwd = 2)
# plot arrow indicating positive skew
arrows(0,2.6,x1=1,length = 0.25, angle = 30,
code = 2, col = par('fg'), lty = par('lty'))
# write figures
dev.off()
####################################################################################
# Figure 03-11
# Z-score and how it relates to the standard deviation of a normal distribution.
# Inspired by: http://en.wikipedia.org/wiki/Standard_score#mediaviewer/File:Normal_distribution_and_scales.gif
# generate a series of numbers
x <- seq(-4, 4, l=1000)
# generate normally distributed data based on the series
fx <- dnorm(x)
# create figures for file
filename <- 'Figure 03-11'
pdf(paste(fileplace,filename,'.pdf'))
# plot the normal distribution
plot(x, fx, type='l', lty=1, xlab='z-score', lwd = 2, ylim = c(-0.05,0.55), xaxp=c(-4,4,8),
ylab='P(x)',
main='Normal Distribution with z-Scores and Standard Deviations',
cex.main = sm, cex.lab = sl, cex.axis = sa)
# plot mean and label accordingly
lines( c(0,0), c(-0.05, 0.45), col = 'red', lty=2, lwd = 2, cex = sl)
text(0, 0.5, expression(bar(x)), srt = 0, col='red')
# plot standard deviation and label accordingly
lines( c(1,1), c(-0.05, 0.25), col = 'blue', lty=2, lwd = 1)
text(1, 0.35, expression(1~sigma), srt = 0, cex = sl, col='blue')
lines( c(2,2), c(-0.05, 0.05), col = 'purple', lty=2, lwd = 1)
text(2, 0.1, expression(2~sigma), srt = 0, cex = sl, col = 'purple')
lines( c(3,3), c(-0.05, 0.00), col = 'green', lty=2, lwd = 1)
text(3, 0.05, expression(3~sigma), srt = 0, cex = sl, col='blue')
lines( c(-1,-1), c(-0.05, 0.25), col = 'blue', lty=2, lwd = 1)
text(-1.01, 0.35, expression(-1~sigma), srt = 0, cex = sl, col='blue')
lines( c(-2,-2), c(-0.05, 0.05), col = 'purple', lty=2, lwd = 1)
text(-2.01, 0.1, expression(-2~sigma), srt = 0, cex = sl, col='purple')
lines( c(-3,-3), c(-0.05, 0.00), col = 'green', lty=2, lwd = 1)
text(-3.01, 0.05, expression(-3~sigma), srt = 0, cex = sl, col='green')
# add text describing extent of representative areas
text(0, 0.23, '68% of values', font = 2, srt = 0, cex = sl, col='blue')
text(0, 0.03, '95% of values', font = 2, srt = 0, cex = sl, col='purple')
text(0, -0.02, '99.7% of values', font = 2, srt = 0, cex = sl, col='green')
# add arrows showing extent of representative areas
arrows(1,0.25,x1=-1,length = 0.15, angle = 20,
code = 3, col = 'blue', lty = par('lty'))
arrows(2,0.05,x1=-2,length = 0.15, angle = 20,
code = 3, col = 'purple', lty = par('lty'))
arrows(3,0.0,x1=-3,length = 0.15, angle = 20,
code = 3, col = 'green', lty = par('lty'))
# write figures
dev.off()
#Author(s): Claudio Agostinelli, Ulric Lund and Hiroyoshi Arai
#Documentation reproduced from package circular, version 0.4-7. License: GPL-2
#http://cran.r-project.org/web/packages/circular/circular.pdf
# Generate von Mises data and create several rose diagrams.
x <- rvonmises(n=400, mu=circular(0), kappa=5 )
y <- rose.diag(x, bins=20, prop=1.5, shrink=1.5, col=2)
# Add points to plot
points(x, plot.info=y, stack=TRUE)
#Author(s): Claudio Agostinelli, Ulric Lund and Hiroyoshi Arai
#Documentation reproduced from package circular, version 0.4-7. License: GPL-2
#http://cran.r-project.org/web/packages/circular/circular.pdf
library(rose)
# Generate von Mises data and create several rose diagrams.
x <- rvonmises(n=400, mu=circular(0), kappa=5 )
y <- rose.diag(x, bins=20, prop=1.5, shrink=1.5, col=2)
# Add points to plot
points(x, plot.info=y, stack=TRUE)
#Author(s): Claudio Agostinelli, Ulric Lund and Hiroyoshi Arai
#Documentation reproduced from package circular, version 0.4-7. License: GPL-2
#http://cran.r-project.org/web/packages/circular/circular.pdf
library(circular)
# Generate von Mises data and create several rose diagrams.
x <- rvonmises(n=400, mu=circular(0), kappa=5 )
y <- rose.diag(x, bins=20, prop=1.5, shrink=1.5, col=2)
# Add points to plot
points(x, plot.info=y, stack=TRUE)
####################################################################################
# https://stat.ethz.ch/R-manual/R-patched/library/base/html/getwd.html
# get working directory to see where your files will be saved
getwd()
# set directory to save your files somewhere else
# make sure to use forward slashes instead of back slashes
setwd("E:/GitHub/geostats")
csv.file <- read.csv("circular_data.csv")
x <- csv.file[2]
rose.diag(x, bins=20, zero=pi/2, units = 'degrees', rotation='clock', col=3)
####################################################################################
# https://stat.ethz.ch/R-manual/R-patched/library/base/html/getwd.html
library('circular')
# get working directory to see where your files will be saved
getwd()
# set directory to save your files somewhere else
# make sure to use forward slashes instead of back slashes
setwd("E:/GitHub/geostats")
csv.file <- read.csv("circular_data.csv")
x <- csv.file[2]
rose.diag(x, bins=20, zero=pi/2, units = 'degrees', rotation='clock', col=3)
####################################################################################
# https://stat.ethz.ch/R-manual/R-patched/library/base/html/getwd.html
install.packages('circular')
library('circular')
# get working directory to see where your files will be saved
getwd()
# set directory to save your files somewhere else
# make sure to use forward slashes instead of back slashes
setwd("E:/GitHub/geostats")
csv.file <- read.csv("circular_data.csv")
x <- csv.file[2]
rose.diag(x, bins=20, zero=pi/2, units = 'degrees', rotation='clock', col=3)
####################################################################################
# https://stat.ethz.ch/R-manual/R-patched/library/base/html/getwd.html
install.packages('circular')
library('circular')
# get working directory to see where your files will be saved
getwd()
# set directory to save your files somewhere else
# make sure to use forward slashes instead of back slashes
setwd("E:/GitHub/geostats")
csv.file <- read.csv("circular_data.csv")
x <- csv.file[2]
rose.diag(x, bins=20, zero=pi/2, units = 'degrees', rotation='clock', col=3, main = 'Rose Diagram')
install.packages("circular")
####################################################################################
# https://stat.ethz.ch/R-manual/R-patched/library/base/html/getwd.html
install.packages('circular', lib = 'E:/R-Portable/App/R-Portable/library')
library('circular')
# get working directory to see where your files will be saved
getwd()
# set directory to save your files somewhere else
# make sure to use forward slashes instead of back slashes
setwd("E:/GitHub/geostats")
csv.file <- read.csv("circular_data.csv")
x <- csv.file[2]
rose.diag(x, bins=20, zero=pi/2, units = 'degrees', rotation='clock', col=3, main = 'Rose Diagram')
#create 10000 random normally distributed data points with a mean of 0 and standard deviation of 1
NormalData<-rnorm(n=10000, m=0, sd=1)
#allow for stacking of figures 1 row and 2 columns in size
par(mfrow=c(1,2))
#create histogram
h <- hist(NormalData, col=2, ylim=c(0,2000), xlim=c(-4,4), main='Ordinary histogram')
#create cumulative dataset
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
#plot cumulative histogram
plot( h, col=2, main = 'Cumulative histogram', xlim=c(-4,4) ) # plot a cumulative histogram of y
# Figure 01-07
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg(),
labs(title="Shepard Sediment Classification Diagram"))
# theme_tern_rgbw adds colors for each axis
# Figure 01-07
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg() +
labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
install.packages(ggtern, lib = 'E:/R-Portable/App/R-Portable/library')
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg() +
labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
# Figure 01-07
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
install.packages(ggtern, lib = 'E:/R-Portable/App/R-Portable/library')
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg() +
labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
install.packages('ggtern', lib = 'E:/R-Portable/App/R-Portable/library')
library('ggtern')
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg() +
labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
install.packages('ggtern', lib = 'E:/R-Portable/App/R-Portable/library')
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg() +
labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg()
# theme_tern_rgbw adds colors for each axis
plot
install.packages("ggtern")
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg()
# theme_tern_rgbw adds colors for each axis
plot
fileplace <- 'E:/STATS/Review/original figures/'
####################################################################################
# Figure 01-04
# Screenshot of histograms created using R.
#create 10000 random normally distributed data points with a mean of 0 and standard deviation of 1
NormalData<-rnorm(n=10000, m=0, sd=1)
# create figures for file
filename <- 'Figure 01-04'
pdf(paste(fileplace,filename,'.pdf'))
#allow for stacking of figures 1 row and 2 columns in size
par(mfrow=c(1,2))
#create histogram
h <- hist(NormalData, col=2, ylim=c(0,2000), xlim=c(-4,4), main='Ordinary histogram')
#create cumulative dataset
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
#plot cumulative histogram
plot( h, col=2, main = 'Cumulative histogram', xlim=c(-4,4) ) # plot a cumulative histogram of y
# write figures
dev.off()
####################################################################################
# Figure 01-05
# Rose diagram.
# https://stat.ethz.ch/R-manual/R-patched/library/base/html/getwd.html
# http://cran.r-project.org/web/packages/circular/circular.pdf
install.packages('circular', lib = 'E:/R-Portable/App/R-Portable/library')
library('circular')
# get working directory to see where your files will be saved
getwd()
# set directory to save your files somewhere else
# make sure to use forward slashes instead of back slashes
setwd("E:/GitHub/geostats")
csv.file <- read.csv("circular_data.csv")
x <- csv.file[2]
# create figures for file
filename <- 'Figure 01-05'
pdf(paste(fileplace,filename,'.pdf'))
rose.diag(x, bins=20, zero=pi/2, units = 'degrees', rotation='clock', col=3, main = 'Rose Diagram')
# write figures
dev.off()
####################################################################################
# Figure 01-06
# Scatterplot.
# create x
x <- c(1,2,3,4,5,6,7,8,9,10)
# generate y from x
y <- x*1.2 + runif(10,2,6)
# create figures for file
filename <- 'Figure 01-06'
pdf(paste(fileplace,filename,'.pdf'))
# generate scatterplot
plot(x, y, main="Scatterplot Example",
xlab="x", ylab="y", pch=19, col = 2)
# write figures
dev.off()
####################################################################################
# Figure 01-07
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
install.packages('ggplot2', lib = 'E:/R-Portable/App/R-Portable/library')
install.packages('ggtern', lib = 'E:/R-Portable/App/R-Portable/library')
library('ggplot2')
library('ggtern')
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg() +
labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
install.packages("circular", lib = "E:/R-Portable/App/R-Portable/library")
install.packages("ggplot2", lib = "E:/R-Portable/App/R-Portable/library")
install.packages("ggplot2", lib = "E:/R-Portable/App/R-Portable/library")
# Figure 01-07
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
install.packages('ggplot2', lib = 'E:/R-Portable/App/R-Portable/library')
install.packages('ggtern', lib = 'E:/R-Portable/App/R-Portable/library')
library('ggplot2')
library('ggtern')
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg() +
labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
install.packages("ggplot2", lib = "E:/R-Portable/App/R-Portable/library")
library('ggplot2')
library('ggtern')
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg() +
labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
library('ggplot2')
library('ggtern')
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_rgbg() +
labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
library('ggplot2')
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_rgbg() +
labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
library('ggplot2')
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) + geom_point() + theme_rgbg() + labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
library('ggplot2')
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point, mapping = aes(x = X, y = Y, z = Z)) + geom_point() + theme_rgbg() + labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
library(ggplot2)
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point, mapping = aes(x = X, y = Y, z = Z)) + geom_point() + theme_rgbg() + labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
library(ggplot2)
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point, mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_rgbg() + labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
library(ggplot2)
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point, mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_rgbg() + labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
library(ggplot2)
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point, mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_rgbg() + labs(title="Shepard Sediment Classification Diagram")
# theme_tern_rgbw adds colors for each axis
plot
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg()
# theme_tern_rgbw adds colors for each axis
plot
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg()
# theme_tern_rgbw adds colors for each axis
plot
