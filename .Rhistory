## ticks labels
grid.text(x = 1.1*sin(at),   default.units = "native",
y = 1.1*cos(at),   gp=gpar(col='red'),
label = c("N", "NE", "E", "SE", "S", "SW", "W", "NW"))
## dashed lines from the center for visual aspect
grid.segments( x0 =  .95*sin(at),  y0 = 0.95*cos(at),
x1 = 0,  0,
gp = gpar(lty="dashed"),
default.units = "native")
## circle just to get the same color of text
grid.circle(r=1,x=0,y=0,gp=gpar(col='red',fill=NA,lwd=2), default.units = "native")
popViewport(1)
library("ggplot2", lib.loc="E:/R-Portable/App/R-Portable/library")
library("graphics", lib.loc="E:/R-Portable/App/R-Portable/library")
library("grDevices", lib.loc="E:/R-Portable/App/R-Portable/library")
require(grid)
#grid.newpage()
##generate some data
x <- circular_data[2]
bins <- 8
rotation <- 'clock'
##tcl =0(no ticks), tcl.text=-2 to write away the ticks marks
rose.diag(x, bins=bins,zero=0,  rotation='clock',
tcl=0,tcl.text=-2,col='#80FF00FF')
library(gridBase)
## I use the plot viewport
vp <- baseViewports()$plot
pushViewport(vp)           ## here we go!
## radial transformation
at <- (0:bins - 0.5)/bins * 2 * pi
## ticks
grid.segments( x0 =  .95*sin(at),  y0 = 0.95*cos(at),
x1 = 1.05*sin(at),  y1 = 1.05*cos(at),
default.units = "native")
## ticks labels
grid.text(x = 1.1*sin(at),   default.units = "native",
y = 1.1*cos(at),   gp=gpar(col='red'),
label = c("N", "NE", "E", "SE", "S", "SW", "W", "NW"))
## dashed lines from the center for visual aspect
grid.segments( x0 =  .95*sin(at),  y0 = 0.95*cos(at),
x1 = 0,  0,
gp = gpar(lty="dashed"),
default.units = "native")
## circle just to get the same color of text
grid.circle(r=1,x=0,y=0,gp=gpar(col='red',fill=NA,lwd=2), default.units = "native")
popViewport(1)
Degrees <- circular_data[1]
library(ggplot2)
Degrees <- circular_data[1]
rose <- ggplot(mapping = aes(x = Degrees)) +
stat_bin(breaks = (0:8 - 0.5)/8 * 360) +
scale_x_continuous(
breaks = 0:7/8*360,
labels = c("N", "NE", "E", "SE", "S", "SW", "W", "NW")
) +
coord_polar(start=-pi/8)
rose
library(ggplot2)
Degrees <- circular_data[1]
rose <- ggplot(mapping = aes(Degrees)) +
stat_bin(breaks = (0:8 - 0.5)/8 * 360) +
scale_x_continuous(
breaks = 0:7/8*360,
labels = c("N", "NE", "E", "SE", "S", "SW", "W", "NW")
) +
coord_polar(start=-pi/8)
rose
library(ggplot2)
Degrees <- circular_data[1]
rose <- ggplot(mapping = aes(x = Degrees)) +
stat_bin(breaks = (0:8 - 0.5)/8 * 360) +
scale_x_continuous(
breaks = 0:7/8*360,
labels = c("N", "NE", "E", "SE", "S", "SW", "W", "NW")
) +
coord_polar(start=-pi/8)
rose
rose.diag(x, bins=10,zero=pi/2, units = 'degrees', rotation='clock')
rose.diag(x, bins=10,zero=pi/2, units = 'degrees', rotation='clock', col=3)
rose.diag(x, bins=30,zero=pi/2, units = 'degrees', rotation='clock', col=3)
rose.diag(x, bins=15,zero=pi/2, units = 'degrees', rotation='clock', col=3)
rose.diag(x, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
library("Rcmdr", lib.loc="E:/R-Portable/App/R-Portable/library")
RHist<-rnorm(n=10000, m=0, sd=1)
hist(RHist)
normal data<-rnorm(n=10000, m=0, sd=1)
hist(normal data)
NormalData<-rnorm(n=10000, m=0, sd=1)
hist(NormalData)
NormalData<-rnorm(n=10000, m=0, sd=1)
hist(NormalData)
NormalData<-rnorm(n=10000, m=0, sd=1, col=2)
hist(NormalData)
NormalData<-rnorm(n=10000, m=0, sd=1)
hist(NormalData, col=2)
NormalData<-rnorm(n=10000, m=0, sd=1)
h <- hist(NormalData, col=2)
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
plot( h ) # plot a cumulative histogram of y
NormalData<-rnorm(n=10000, m=0, sd=1)
h <- hist(NormalData, col=2)
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
plot( h, col=2 ) # plot a cumulative histogram of y
NormalData<-rnorm(n=10000, m=0, sd=1)
par(mfrow=c(2,1))
h <- hist(NormalData, col=2)
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
plot( h, col=2 ) # plot a cumulative histogram of y
NormalData<-rnorm(n=10000, m=0, sd=1)
par(mfrow=c(1,2))
h <- hist(NormalData, col=2)
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
plot( h, col=2 ) # plot a cumulative histogram of y
NormalData<-rnorm(n=10000, m=0, sd=1)
par(mfrow=c(1,2))
h <- hist(NormalData, col=2)
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
plot( h, col=2 ) # plot a cumulative histogram of y
#create 10000 random normally distributed data points with a mean of 0 and standard deviation of 1
NormalData<-rnorm(n=10000, m=0, sd=1)
#allow for stacking of figures 1 row and 2 columns in size
par(mfrow=c(1,2))
#create histogram
h <- hist(NormalData, col=2, xlim=2500, main='Ordinary histogram')
#create cumulative dataset
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
#plot cumulative histogram
plot( h, col=2, main = 'Cumulative histogram' ) # plot a cumulative histogram of y
h <- hist(NormalData, col=2, xlim=3000, main='Ordinary histogram')
#create 10000 random normally distributed data points with a mean of 0 and standard deviation of 1
NormalData<-rnorm(n=10000, m=0, sd=1)
#allow for stacking of figures 1 row and 2 columns in size
par(mfrow=c(1,2))
#create histogram
h <- hist(NormalData, col=2, xlim=3000, main='Ordinary histogram')
#create cumulative dataset
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
#plot cumulative histogram
plot( h, col=2, main = 'Cumulative histogram' ) # plot a cumulative histogram of y
#create 10000 random normally distributed data points with a mean of 0 and standard deviation of 1
NormalData<-rnorm(n=10000, m=0, sd=1)
#allow for stacking of figures 1 row and 2 columns in size
par(mfrow=c(1,2))
#create histogram
h <- hist(NormalData, col=2, xlim=2000, main='Ordinary histogram')
#create cumulative dataset
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
#plot cumulative histogram
plot( h, col=2, main = 'Cumulative histogram' ) # plot a cumulative histogram of y
#create 10000 random normally distributed data points with a mean of 0 and standard deviation of 1
NormalData<-rnorm(n=10000, m=0, sd=1)
#allow for stacking of figures 1 row and 2 columns in size
par(mfrow=c(1,2))
#create histogram
h <- hist(NormalData, col=2, xlim=c(0,2000), main='Ordinary histogram')
#create cumulative dataset
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
#plot cumulative histogram
plot( h, col=2, main = 'Cumulative histogram' ) # plot a cumulative histogram of y
#create 10000 random normally distributed data points with a mean of 0 and standard deviation of 1
NormalData<-rnorm(n=10000, m=0, sd=1)
#allow for stacking of figures 1 row and 2 columns in size
par(mfrow=c(1,2))
#create histogram
h <- hist(NormalData, col=2, ylim=c(0,2000), main='Ordinary histogram')
#create cumulative dataset
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
#plot cumulative histogram
plot( h, col=2, main = 'Cumulative histogram' ) # plot a cumulative histogram of y
plot( h, col=2, main = 'Cumulative histogram', xlim=c(0,4) ) # plot a cumulative histogram of y
#create 10000 random normally distributed data points with a mean of 0 and standard deviation of 1
NormalData<-rnorm(n=10000, m=0, sd=1)
#allow for stacking of figures 1 row and 2 columns in size
par(mfrow=c(1,2))
#create histogram
h <- hist(NormalData, col=2, ylim=c(0,2000), main='Ordinary histogram')
#create cumulative dataset
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
#plot cumulative histogram
plot( h, col=2, main = 'Cumulative histogram', xlim=c(0,4) ) # plot a cumulative histogram of y
#create 10000 random normally distributed data points with a mean of 0 and standard deviation of 1
NormalData<-rnorm(n=10000, m=0, sd=1)
#allow for stacking of figures 1 row and 2 columns in size
par(mfrow=c(1,2))
#create histogram
h <- hist(NormalData, col=2, ylim=c(0,2000), main='Ordinary histogram')
#create cumulative dataset
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
#plot cumulative histogram
plot( h, col=2, main = 'Cumulative histogram', xlim=c(-4,4) ) # plot a cumulative histogram of y
#create 10000 random normally distributed data points with a mean of 0 and standard deviation of 1
NormalData<-rnorm(n=10000, m=0, sd=1)
#allow for stacking of figures 1 row and 2 columns in size
par(mfrow=c(1,2))
#create histogram
h <- hist(NormalData, col=2, ylim=c(0,2000), xlim=c(-4,4), main='Ordinary histogram')
#create cumulative dataset
h$counts <- cumsum(h$counts) # replace the cell freq.s by cumulative freq.s
#plot cumulative histogram
plot( h, col=2, main = 'Cumulative histogram', xlim=c(-4,4) ) # plot a cumulative histogram of y
a <- runif(100, 30, 60)
b <- runif(100, 40, 50)
c <- runif(100, 1, 360)
d <- runif(100, 195, 255)
e <- runif(100, 215, 235)
f = merge(a, b)
f = merge(f, c)
f = merge(f, d)
f = merge(f, e)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- runif(100, 30, 60)
b <- runif(100, 40, 50)
c <- runif(100, 1, 360)
d <- runif(100, 195, 255)
e <- runif(100, 215, 235)
f = a+b+c+d+e
#f = rbind(a, b)
#f = rbind(f, c)
#f = rbind(f, d)
#f = rbind(f, e)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- runif(100, 30, 60)
b <- runif(100, 40, 50)
c <- runif(100, 1, 360)
d <- runif(100, 195, 255)
e <- runif(100, 215, 235)
f = rbind(a, b)
f = rbind(f, c)
f = rbind(f, d)
f = rbind(f, e)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- runif(100, 30, 60)
b <- runif(100, 40, 50)
c <- runif(100, 1, 360)
d <- runif(100, 195, 255)
e <- runif(100, 215, 235)
f = rbind(a, b)
f = rbind(f, c)
f = rbind(f, d)
f = rbind(f, e)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- runif(100, 30, 60)
b <- runif(100, 40, 50)
c <- runif(20, 1, 360)
d <- runif(100, 195, 255)
e <- runif(100, 215, 235)
f = rbind(a, b)
f = rbind(f, c)
f = rbind(f, d)
f = rbind(f, e)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- runif(100, 30, 60)
b <- runif(100, 40, 50)
c <- runif(20, 1, 360)
d <- runif(100, 195, 255)
e <- runif(100, 215, 235)
f <- c(a,b,c,d,e)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- runif(100, 30, 60)
b <- runif(100, 40, 50)
c <- runif(10, 1, 360)
d <- runif(100, 195, 255)
e <- runif(100, 215, 235)
f <- c(a,b,c,d,e)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- runif(100, 30, 60)
b <- runif(100, 40, 50)
c <- runif(10, 1, 360)
d <- runif(100, 195, 255)
e <- runif(100, 215, 235)
f <- c(a,b,c,d,e)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- runif(100, 30, 60)
b <- runif(200, 40, 50)
c <- runif(10, 1, 360)
d <- runif(100, 195, 255)
e <- runif(200, 215, 235)
f <- c(a,b,c,d,e)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- runif(100, 30, 60)
b <- runif(200, 40, 50)
c <- runif(10, 1, 360)
d <- runif(100, 195, 255)
e <- runif(200, 215, 235)
f <- c(a,b,c,d,e)
print(f)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- runif(100, 30, 60)
b <- runif(200, 40, 50)
c <- runif(10, 1, 360)
d <- runif(100, 195, 255)
e <- runif(200, 215, 235)
f <- a+b+c+d+e
print(f)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
b <- runif(200, 40, 50)
a <- c(runif(100, 30, 60))
a <- c(runif(100, 30, 60))
b <- runif(200, 40, 50)
c <- runif(10, 1, 360)
d <- runif(100, 195, 255)
e <- runif(200, 215, 235)
f <- c(a,b,c,d,e)
print(f)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- runif(100, 30, 60)
b <- runif(200, 40, 50)
c <- runif(10, 1, 360)
d <- runif(100, 195, 255)
e <- runif(200, 215, 235)
f <- as.vector(matrix(c(a,b,c,d,e), nrow=2, byrow=TRUE))
print(f)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- runif(100, 30, 60)
b <- runif(200, 40, 50)
c <- runif(10, 1, 360)
d <- runif(100, 195, 255)
e <- runif(200, 215, 235)
f <- as.vector(matrix(c(a,b), nrow=2, byrow=TRUE))
print(f)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- runif(100, 30, 60)
b <- runif(200, 40, 50)
c <- runif(10, 1, 360)
d <- runif(100, 195, 255)
e <- runif(200, 215, 235)
f = as.vector(rbind(a, b))
f = as.vector(rbind(f, c))
f = as.vector(rbind(f, d))
f = as.vector(rbind(f, e))
print(f)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
e <- data.frame(runif(200, 215, 235))
a <- data.frame(runif(100, 30, 60))
b <- data.frame(runif(200, 40, 50))
c <- data.frame(runif(10, 1, 360))
d <- data.frame(runif(100, 195, 255))
e <- data.frame(runif(200, 215, 235))
f = as.vector(rbind(a, b))
f = as.vector(rbind(f, c))
f = as.vector(rbind(f, d))
f = as.vector(rbind(f, e))
print(f)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- data.frame(runif(100, 30, 60))
b <- data.frame(runif(200, 40, 50))
c <- data.frame(runif(10, 1, 360))
d <- data.frame(runif(100, 195, 255))
e <- data.frame(runif(200, 215, 235))
g = as.vector(rbind(a, b))
h = as.vector(rbind(c, d))
i = as.vector(rbind(g, h))
f = as.vector(rbind(i, e))
print(f)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
a <- data.frame(runif(100, 30, 60))
b <- data.frame(runif(200, 40, 50))
c <- data.frame(runif(10, 1, 360))
d <- data.frame(runif(100, 195, 255))
e <- data.frame(runif(200, 215, 235))
g = rbind(a, b)
h = rbind(c, d)
i = rbind(g, h)
f = bind(i, e)
print(f)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
View(d)
a <- data.frame(runif(100, 30, 60))
b <- data.frame(runif(200, 40, 50))
c <- data.frame(runif(10, 1, 360))
d <- data.frame(runif(100, 195, 255))
e <- data.frame(runif(200, 215, 235))
g = rbind(a, b)
h = rbind(c, d)
i = rbind(g, h)
f = rbind(i, e)
print(f)
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
####################################################################################
# https://stat.ethz.ch/R-manual/R-patched/library/base/html/getwd.html
# get working directory to see where your files will be saved
getwd()
# set directory to save your files somewhere else
# make sure to use forward slashes instead of back slashes
setwd("E:/GitHub/geostats")
csv.file <- read.csv("circular_data.csv")
f <- csv.file[1]
rose.diag(f, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
####################################################################################
# https://stat.ethz.ch/R-manual/R-patched/library/base/html/getwd.html
# get working directory to see where your files will be saved
getwd()
# set directory to save your files somewhere else
# make sure to use forward slashes instead of back slashes
setwd("E:/GitHub/geostats")
csv.file <- read.csv("circular_data.csv")
x <- csv.file[1]
rose.diag(x, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
####################################################################################
# https://stat.ethz.ch/R-manual/R-patched/library/base/html/getwd.html
# get working directory to see where your files will be saved
getwd()
# set directory to save your files somewhere else
# make sure to use forward slashes instead of back slashes
setwd("E:/GitHub/geostats")
csv.file <- read.csv("circular_data.csv")
x <- csv.file[1]
rose.diag(x, bins=20,zero=pi/2, units = 'degrees', rotation='clock', col=3)
####################################################################################
# https://stat.ethz.ch/R-manual/R-patched/library/base/html/getwd.html
# get working directory to see where your files will be saved
getwd()
# set directory to save your files somewhere else
# make sure to use forward slashes instead of back slashes
setwd("E:/GitHub/geostats")
csv.file <- read.csv("circular_data.csv")
x <- csv.file[1]
rose.diag(x, bins=10, zero=pi/2, units = 'degrees', rotation='clock', col=3)
####################################################################################
# https://stat.ethz.ch/R-manual/R-patched/library/base/html/getwd.html
# get working directory to see where your files will be saved
getwd()
# set directory to save your files somewhere else
# make sure to use forward slashes instead of back slashes
setwd("E:/GitHub/geostats")
csv.file <- read.csv("circular_data.csv")
x <- csv.file[1]
rose.diag(x, bins=20, zero=pi/2, units = 'degrees', rotation='clock', col=3)
####################################################################################
# https://stat.ethz.ch/R-manual/R-patched/library/base/html/getwd.html
# get working directory to see where your files will be saved
getwd()
# set directory to save your files somewhere else
# make sure to use forward slashes instead of back slashes
setwd("E:/GitHub/geostats")
csv.file <- read.csv("circular_data.csv")
x <- csv.file[2]
rose.diag(x, bins=20, zero=pi/2, units = 'degrees', rotation='clock', col=3)
View(csv.file)
#Scatterplot
#create x
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- x*1.2 + runif(1,0,4)
plot(x, y, main="Scatterplot Example",
xlab="x", ylab="y", pch=19)
#Scatterplot
#create x
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- x*1.2 + runif(1,2,10)
plot(x, y, main="Scatterplot Example",
xlab="x", ylab="y", pch=19)
#Scatterplot
#create x
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- x*1.2 + runif(10,2,10)
plot(x, y, main="Scatterplot Example",
xlab="x", ylab="y", pch=19)
#Scatterplot
#create x
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- x*1.2 + runif(10,2,6)
plot(x, y, main="Scatterplot Example",
xlab="x", ylab="y", pch=19)
#Scatterplot
#create x
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- x*1.2 + runif(10,2,6)
plot(x, y, main="Scatterplot Example",
xlab="x", ylab="y", pch=19, col = 2)
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
library(ggtern)
# Based of random data.
DATA <- data.frame(A = runif(100), B = runif(100), C = runif(100))
plot <- ggtern(data = DATA,
mapping = aes(x = A, y = B, z = C)) +
geom_point()
plot
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
library(ggtern)
# Based of random data.
DATA <- data.frame(A = runif(100), B = runif(100), C = runif(100))
plot <- ggtern(data = DATA,
mapping = aes(x = A, y = B, z = C)) +
geom_point()
plot
install.packages("ggtern")
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
library(ggtern)
# Based of random data.
DATA <- data.frame(A = runif(100), B = runif(100), C = runif(100))
plot <- ggtern(data = DATA,
mapping = aes(x = A, y = B, z = C)) +
geom_point()
plot
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
library(ggtern)
# Based of random data.
DATA <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
plot <- ggtern(data = DATA,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbw()
plot
# from http://www.ggtern.com/2013/12/12/hello-world-2-2/
library(ggtern)
# generate ternary data points
tri_point <- data.frame(X = runif(100), Y = runif(100), Z = runif(100))
# generate ternary plot
plot <- ggtern(data = tri_point,
mapping = aes(x = X, y = Y, z = Z)) +
geom_point() + theme_tern_rgbg()
# theme_tern_rgbw adds colors for each axis
plot
